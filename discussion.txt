Recursion

In your own words, what is recursion?
    Determining or describing an object or process through its part like the same but smaller size
Why is it necessary to have a base case?
    To determine when recursion ends



Graphs

What is a graph?
    A set of nodes and edges between them
How is a graph different from a tree?
    Graph can have loops
Give an example of something that would be good to model with a graph.
    railroads


Performance of Different Data Structures

Fill in the missing spots in the chart with the correct runtimes. Do this by reasoning through how the data structures work, NOT by looking up the solution. Add-R means add to the right/end/top and Add-L means add to the left/beginning/bottom. There are X’s in the spots where that operation doesn’t make sense for that data structure (for instance, you can’t index a stack, or pop from the end of a queue). We’ve provided the first few answers for you.

Fill in the runtimes for the following actions for the table below:

Data Structure              Index       Search      Add-R    Add-L       Pop-L       Pop-R
Python List (Array)         O(1)        O(n)        O(1)      O(n)       O(n)        O(1)
Linked List                 O(1)        O(n)         O(1)     O(1)       O(1)        O(1)    
Doubly-Linked List          O(1)        O(n)         O(1)     O(1)       O(1)        O(1)
Queue (as Array)             X          X            O(1)      X         O(1)          X
Queue (as LL or DLL)          X          X                    X                   X
Stack (as Array, LL, or DLL)      X          X                    X            X    
Deque (as DLL)                X          X                
Index: Find an item in the structure when you know its position
Search: Find an item in the structure when you know its data
Add(R/L): Set a key in set/dictionary or add node to tree
Pop(R/L): Remove a key or node
Fill in Runtime and Memory:

The answers for dictionary have been provided; you should fill in the rest:

Data Structure              Get        Add      Delete         Iterate         Memory
Dictionary (Hash Map)       O(1)       O(1)      O(1)          O(n)         medium
Set (Hash Map)              O(1)       O(1)      O(1)                       medium
Binary Search Tree         O(log n)    O(log n)   O(log n)                   a little
Tree                        O(log n)    O(log n)    O(log n)    
Get: Find an item in the structure
Add: Set a key in set/dictionary or add node to tree
Delete: Remove a key or node
Iterate: Find next item in data structure
Memory: Relative to data, how much memory is used? (Choices: a little, medium, or a lot)
Sorting

Describe in words how the Bubble Sort algorithm works.
Start with the first element, compare with next element, swap them to order in a given order. Continue till there is no next element. That means the largest element is the last. Return to  the beginning, start the same again with a probably new first element.

Describe in words how the Merge Sort algorithm works.
Recursively split given array in half. For each half do the same until results are a one-element arrays.
Start go back by merging two sorted lists to one sorted list containing all elements from two given sorted lists. Base case is two one-element arrays. For longer lists: find smaller first element, move it to the result list, find smaller first element again, do the same 
Describe in words how the Quick Sort algorithm works.
Find a “middle” element in a given array. Compare all elements to the middle and form three arrays: less than middle, equal to middle, grater than middle. For less than middle and grater than middle do the same.